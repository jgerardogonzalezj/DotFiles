set -g history-limit 50000

# set -g utf-8 on
set -g mouse on
# # Use vim keybindings in copy mode
setw -g status-keys vi
setw -g mode-keys vi
setw -g monitor-activity

# Deactivate the menu when using right click.
unbind  <
unbind  >

# Set ON synchronize-panes CAUTION
set -g assume-paste-time 0

# unbind menus-display
unbind -n MouseDown3Status
unbind -n MouseDown3StatusLeft
unbind -n MouseDown3StatusRight
unbind -n M-MouseDown3Pane

# WheelUpPane - enter copy-mode-vi
bind-key -n WheelUpPane if-shell -F -t = "#{mouse_any_flag}" "send-keys -M" "if -Ft= \"#{pane_in_mode}\" \"send-keys -M\" \"copy-mode -et=\""

# MouseDown1Pane - Clear selection, no-copy, no cancel copy-mode
unbind -T copy-mode-vi MouseDown1Pane
unbind -T copy-mode MouseDown1Pane
# Clear without copy nor losing the position.
bind-key -T copy-mode-vi MouseDown1Pane send-keys -X clear-selection

# MouseUp1Pane - Begin selection.
unbind -T copy-mode-vi MouseUp1Pane

# MouseDrag1Pane - Select, no copy, no cancel copy-mode.
unbind -T copy-mode-vi MouseDrag1Pane
unbind -T copy-mode MouseDrag1Pane
#bind -n MouseDrag1Pane if-shell -F -t = "#{mouse_any_flag}" "if -Ft= \"#{pane_in_mode}\" \"copy-mode -M\" \"send-keys -M\"" "copy-mode -M"
bind -n MouseDrag1Pane if-shell -F -t = "#{mouse_any_flag}" "if -Ft= \"#{pane_in_mode}\" \"copy-mode -M\" \"send-keys -M\""
bind-key -T copy-mode-vi MouseDrag1Pane send-keys -X  begin-selection

# MouseDragEnd1Pane -
# Unbind to do "nothing" after select text.
unbind -T copy-mode-vi MouseDragEnd1Pane

# DoubleClick1Pane - Cancel copy-mode-vi
unbind -T copy-mode-vi DoubleClick1Pane
bind-key -T copy-mode-vi DoubleClick1Pane send-keys -X cancel

# MouseDown2Pane - Copy selected text to buffer and clipboard. cancel-select
# Send selection to Clipboard.
unbind -T copy-mode-vi MouseDown2Pane
bind-key -T copy-mode-vi MouseDown2Pane send-keys -X copy-selection \; run "tmux save-buffer - | /mnt/c/Windows/System32/clip.exe" \; send-keys -X clear-selection

# MouseDown3Pane - Cancel copy-mode and Paste from clipboard
# Past from the Clipboard.
unbind -T copy-mode-vi MouseDown3Pane
unbind -T root MouseDown3Pane
bind-key -T copy-mode-vi MouseDown3Pane send-keys -X cancel \; paste-buffer
bind-key -T root MouseDown3Pane paste-buffer

# MouseDrag3Pane
# bind-key -T copy-mode-vi MouseDrag3Pane select-pane \; send-keys -X begin-selection

# I want to use Enter to copy
unbind -T copy-mode-vi Enter
bind-key -T copy-mode-vi Enter run "tmux save-buffer - | /mnt/c/Windows/System32/clip.exe" \; send-keys -X clear-selection

# Ways to exit copy mode: Escape, End, q, double-click.
# I want to use Escape to cancel selection.
unbind -T copy-mode-vi Escape
bind-key -T copy-mode-vi Escape send-keys -X cancel
# I want to use End to cancel selection.
unbind -T copy-mode-vi End
bind-key -T copy-mode-vi End send-keys -X cancel

# Set the titles
set -g set-titles on

# Start the index from 1.
set -g base-index 1

# set escape time so vim is responsive inside tmux
set -g escape-time 1

# prefix r: reload tmux config
bind r source-file ~/.tmux.conf \; display "Reloaded ~/.tmux.conf"

# make new panes and windows use the pwd
bind-key | split-window -h -c "#{pane_current_path}"
bind-key - split-window -v -c "#{pane_current_path}"
bind-key c new-window -c "#{pane_current_path}"

# smart pane switching with awareness of vim splits
# makes ctrl-j and ctrl-k navigate fzf search results when fzf active in pane
# providing the same behavior as ctrl-j and ctrl-k when navigating ctrl-p results
# inside vim.

is_vim="ps -o state= -o comm= -t '#{pane_tty}' | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"

is_fzf="ps -o state= -o comm= -t '#{pane_tty}' | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?fzf$'"
bind-key -n C-h run "($is_vim && tmux send-keys C-h) || tmux select-pane -L"

bind-key -n C-j run "($is_vim && tmux send-keys C-j)  || ($is_fzf && tmux send-keys C-j) || tmux select-pane -D"

bind-key -n C-k run "($is_vim && tmux send-keys C-k) || ($is_fzf && tmux send-keys C-k)  || tmux select-pane -U"

bind-key -n C-l run "($is_vim && tmux send-keys C-l) || tmux select-pane -R"

# bind-key -n C-\ if-shell "$is_vim" "send-keys C-\\" "select-pane -l"
unbind-key -n C-\\
# use `<prefix> [` to enter copy-mode
# bind-key [ copy-mode
# unbind-key C-[
# bind-key ] paste-buffer
unbind ]
unbind [

# The time the number of the pane is shown
set -g display-panes-time 10000

# The time the messages are shown.
set -g display-time 10000

# Inactive panes color for C-b q
set -g display-panes-colour magenta

# The blod line showing the active pane
set -g pane-active-border-style 'fg=red bold,bg=#808080'

#### Personal commands.
bind-key -T prefix A set-buffer "clear; while true; do echo -e \"\\t`hostname` : `date` : keeping Alive\"; sleep 120; done\n"\; paste-buffer

bind-key -T prefix F set-buffer -a "id <YOUR_USER> && sudo -u <YOUR_USER> bash\n" \; paste-buffer \; set-buffer -a "\n\nwhoami\n\n"\; paste-buffer

# Set On synchronize-panes CAUTION
# Do not use this function if you don't know what you are doing.
# I'm using set -w, te set this property local to the windows I'm working
#  in a synchronous way.
bind-key -T prefix C-s set -g synchronize-panes on \; set -w window-style bg=#A0A0A0,fg=#000000
# Set OFF synchronize-panes CAUTION
# Do not use this function if you don't know what you are doing.
bind-key -T prefix M-s set -g synchronize-panes off \; set -w window-style fg=#A0A0A0,bg=#000000

#### Below is how to create a menu
# Option 1)
# bind-key -n <mouse-action>  display-menu -T "#[align=centre]#{pane_index} (#{pane_id})" -t = -x M -y M "#{?mouse_word,Search For #[underscore]#{=/9/...:mouse_word},}" C-r "copy-mode -t=; send -Xt= search-backward \"#{q:mouse_word}\"" "#{?mouse_word,Type #[underscore]#{=/9/...:mouse_word},}" C-y "send-keys -l -- \"#{q:mouse_word}\"" "#{?mouse_word,Copy #[underscore]#{=/9/...:mouse_word},}" c "set-buffer -- \"#{q:mouse_word}\"" "#{?mouse_line,Copy Line,}" l "set-buffer -- \"#{q:mouse_line}\""  "Horizontal Split" h "split-window -h" "Vertical Split" v "split-window -v"  "Swap Up" u "swap-pane -U" "Swap Down" d "swap-pane -D" "#{?pane_marked_set,,-}Swap Marked" s swap-pane  Kill X kill-pane Respawn R "respawn-pane -k" "#{?pane_marked,Unmark,Mark}" m "select-pane -m" "#{?window_zoomed_flag,Unzoom,Zoom}" z "resize-pane -Z"

# Option 2)
# bind-key -n <mouse-action> display-menu -T "#[align=centre]#{client_name}" -t = -x M -y S Detach d detach-client "Detach & Kill" X "detach-client -P" "Detach Others" o "detach-client -a"  Lock l lock-client

# Option 3)
# bind-key -n <mouse-action> display-menu -T "#[align=centre]#{session_name}" -t = -x M -y S Next n "switch-client -n" Previous p "switch-client -p"  Renumber N "move-window -r" Rename n "command-prompt -I \"#S\" \"rename-session -- '%%'\""  "New Session" s new-session "New Window" w new-window

# Option 4)
# bind-key -n <mouse-action> display-menu -T "#[align=centre]#{window_index}:#{window_name}" -t = -x W -y S "Swap Left" l "swap-window -t:-1" "Swap Right" r "swap-window -t:+1" "#{?pane_marked_set,,-}Swap Marked" s swap-window  Kill X kill-window Respawn R "respawn-window -k" "#{?pane_marked,Unmark,Mark}" m "select-pane -m" Rename n "command-prompt -I \"#W\" \"rename-window -- '%%'\""  "New After" w "new-window -a" "New At End" W new-window

# Show load average and hostname on bottom right

# Terminal junks!
set -g default-terminal "screen-256color"

# Bad Wolf
set -g status-style fg=white,bg=colour234
set -g window-status-activity-style bold
set -g pane-border-style fg=colour245
set -g pane-active-border-style fg=colour39
set -g message-style fg=colour16,bg=colour221,bold

# Custom status bar
set -g status-left-length 32
set -g status-right-length 150
set -g status-interval 5

# set -g status-right '#[fg=yellow]#(cut -d " " -f 1-3 /proc/loadavg)#[default] #[fg=white]%H:%M#[default]'
set -g status-right '#[fg=colour237]#[fg=colour247,bg=colour237]#(uptime | cut -d "," -f 3- | cut -d ":" -f2) #[fg=colour16,bg=colour247,bold] #h '

set -g window-status-format "#[fg=white,bg=colour234] #I #W "
set -g window-status-current-format "#[fg=colour234,bg=colour39]#[fg=colour16,bg=colour39,noreverse,bold] #I #W #[fg=colour39,bg=colour234,nobold]"

# list of plugins
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-sensible'
set -g @plugin 'christoomey/vim-tmux-navigator'
set -g @plugin 'tmux-plugins/vim-tmux'
# TMUX plugin manager (keep at the bottom of tmux.conf)
run -b '~/.tmux/plugins/tpm/tpm'
